name: Terraform CI/CD for Yandex Cloud

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: Terraform Workflow
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6 # Укажите вашу версию Terraform

      # Шаг 3: Настройка переменных окружения для Yandex Cloud
      - name: Set up environment variables
        env:
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          echo "export YC_TOKEN=${{ secrets.YC_TOKEN }}" >> $GITHUB_ENV
          echo "export YC_CLOUD_ID=${{ secrets.YC_CLOUD_ID }}" >> $GITHUB_ENV
          echo "export YC_FOLDER_ID=${{ secrets.YC_FOLDER_ID }}" >> $GITHUB_ENV

      # Шаг 4: Инициализация Terraform
      - name: Terraform Init
        run: terraform init

      # Шаг 5: Планирование изменений (terraform plan)
      - name: Terraform Plan
        run: terraform plan -var="yc_token=${{ secrets.YC_TOKEN }}"

      # # Шаг 6 (опционально): Применение изменений (terraform apply)
      # # Этот шаг можно включить только для ветки main.
      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main'
      #   run: terraform apply -auto-approve -var="yc_token=${{ secrets.YC_TOKEN }}"


      # Шаг 7 (опционально): Применение изменений (terraform apply)
      # Этот шаг можно включить только для ветки main.
      - name: Terraform Destroy
        if: github.ref == 'refs/heads/main'
        run: terraform destroy -auto-approve -var="yc_token=${{ secrets.YC_TOKEN }}"
