name: Terraform CI/CD for Yandex Cloud

on:
  push:
    branches:
      - main
  pull_request:

  # Добавляем возможность ручного запуска для apply и destroy
  workflow_dispatch:

jobs:
  terraform-init-plan:
    name: Terraform Init and Plan
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6 # Укажите вашу версию Terraform

      # Шаг 3: Настройка переменных окружения для Yandex Cloud
      - name: Set up environment variables
        env:
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          echo "export TF_VAR_yc_token=${{ secrets.YC_TOKEN }}" >> $GITHUB_ENV
          echo "export TF_VAR_yc_cloud_id=${{ secrets.YC_CLOUD_ID }}" >> $GITHUB_ENV
          echo "export TF_VAR_yc_folder_id=${{ secrets.YC_FOLDER_ID }}" >> $GITHUB_ENV

      # Шаг 4: Инициализация Terraform
      - name: Terraform Init
        run: terraform init

      # Шаг 5: Планирование изменений (terraform plan)
      - name: Terraform Plan
        run: terraform plan

  terraform-apply:
    name: Terraform Apply (Manual Trigger)
    runs-on: ubuntu-latest
    needs: terraform-init-plan # Зависит от выполнения init и plan

    # Запускается только вручную через workflow_dispatch
    if: ${{ github.event_name == 'workflow_dispatch' }}

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Шаг 3: Настройка переменных окружения для Yandex Cloud
      - name: Set up environment variables
        env:
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          echo "export TF_VAR_yc_token=${{ secrets.YC_TOKEN }}" >> $GITHUB_ENV
          echo "export TF_VAR_yc_cloud_id=${{ secrets.YC_CLOUD_ID }}" >> $GITHUB_ENV
          echo "export TF_VAR_yc_folder_id=${{ secrets.YC_FOLDER_ID }}" >> $GITHUB_ENV

      # Шаг 4: Применение изменений (terraform apply)
      - name: Terraform Apply
        run: terraform apply -auto-approve

  terraform-destroy:
    name: Terraform Destroy (Manual Trigger)
    runs-on: ubuntu-latest

    # Запускается только вручную через workflow_dispatch
    if: ${{ github.event_name == 'workflow_dispatch' }}

    steps:
      # Шаг 1: Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # Шаг 2: Установка Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Шаг 3: Настройка переменных окружения для Yandex Cloud
      - name: Set up environment variables
        env:
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          echo "export TF_VAR_yc_token=${{ secrets.YC_TOKEN }}" >> $GITHUB_ENV
          echo "export TF_VAR_yc_cloud_id=${{ secrets.YC_CLOUD_ID }}" >> $GITHUB_ENV
          echo "export TF_VAR_yc_folder_id=${{ secrets.YC_FOLDER_ID }}" >> $GITHUB_ENV

      # Шаг 4: Уничтожение инфраструктуры (terraform destroy)
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
